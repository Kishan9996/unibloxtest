// Generated by Qodo Gen

import { UserServices } from "../user.services";

describe('UserServices', () => {

    // User creation with valid signup data creates new user with USER role and isLoggedIn false
    it('should create new user with USER role and isLoggedIn false when valid signup data provided', async () => {

      const mockUser:any = {
        id: '123',
        email: 'test@test.com',
        name: 'Test User',
        role: 'USER',
        isLoggedIn: false
      };

      const mockSignupData:any = {
        email: 'test@test.com',
        password: 'password123',
        name: 'Test User'
      };

      const userServices = new UserServices();

      jest.spyOn(userServices['userRepository'], 'createUserWithPasswordEncryption')
        .mockResolvedValue(mockUser);

      const result = await userServices.createUser(mockSignupData);

      expect(userServices['userRepository'].createUserWithPasswordEncryption)
        .toHaveBeenCalledWith({
          ...mockSignupData,
          role: 'USER',
          isLoggedIn: false
        });

      expect(result).toEqual(mockUser);

    });

    // User creation with invalid/missing password returns null
    it('should return null when creating user with missing password', async () => {

      const mockSignupData = {
        email: 'test@test.com',
        password: '',
        name: 'Test User'
      };

      const userServices = new UserServices();

      jest.spyOn(userServices['userRepository'], 'createUserWithPasswordEncryption')
        .mockResolvedValue(null);

      const result = await userServices.createUser(mockSignupData);

      expect(userServices['userRepository'].createUserWithPasswordEncryption)
        .toHaveBeenCalledWith({
          ...mockSignupData,
          role: 'USER', 
          isLoggedIn: false
        });

      expect(result).toBeNull();

    });
});
